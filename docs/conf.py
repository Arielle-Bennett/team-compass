#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Team Compass documentation build configuration file, created by
# sphinx-quickstart on Sun Dec  3 20:44:20 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx.ext.mathjax']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
source_suffix = ['.rst', '.md']

# Support markdown via recommonmark:
from recommonmark.parser import CommonMarkParser
source_parsers = {
    '.md': CommonMarkParser,
}

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'Team Compass'
copyright = '2017, JupyterHub Team and Binder Team'
author = 'JupyterHub Team and Binder Team'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '1.0'
# The full version, including alpha/beta/rc tags.
release = '1.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

def setup(app):
    app.add_stylesheet('custom.css')

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
import alabaster_jupyterhub
html_theme = 'alabaster_jupyterhub'
html_theme_path = [alabaster_jupyterhub.get_html_theme_path()]

# Logo
html_logo = '_static/logo.png'
html_favicon = '_static/logo.png'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'about.html',
        'navigation.html',
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
        'donate.html',
    ]
}


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'TeamCompassdoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'TeamCompass.tex', 'Team Compass Documentation',
     'JupyterHub Team and Binder Team', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'teamcompass', 'Team Compass Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'TeamCompass', 'Team Compass Documentation',
     author, 'TeamCompass', 'One line description of project.',
     'Miscellaneous'),
]



# -- Options for Epub output ----------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']


# -- Generate Contributors tables ------------------------------------------

import pandas as pd
import os
from ruamel import yaml

# Variables
N_PER_ROW = 4

# Init
yaml = yaml.YAML()
keyvals = pd.read_csv('./team/contributor_key.csv', index_col=0)

template = '<td align="center" class="contrib_entry"><a href="{HANDLE_URL}"><img src="{AVATAR_URL}" class="headshot" alt="{NAME}" /><br /><p class="name"><b>{NAME}</b></p></a><p class="contrib_affiliation" >{AFFILIATION}</p><p class="contributions">{CONTRIBUTIONS}</p></td>'

def _generate_contributors(contributors, keys):
    s = ['<table class="docutils contributors">', '<tr class="row-even">']
    for ix, person in contributors.iterrows():
        if ix % N_PER_ROW == 0 and ix != 0:
            s += ['</tr><tr class="row-even">']

        # Build contrib text
        this_contrib = person['contributions'].split(',')
        contrib_text = []
        for contrib in this_contrib:
            if contrib in keys.index:
                text = keyvals.loc[contrib, 'image']
                desc = keyvals.loc[contrib, 'description']
                contrib_text += ['<span title={TOOLTIP} class="contribs">{CONTRIB}</span>'.format(TOOLTIP=desc, CONTRIB=text)]
            else:
                contrib_text += ['<span class="contribs contribs_text">{CONTRIB}</span>'.format(CONTRIB=contrib)]

        contrib_text = '<span class="contribs">,</span>'.join(contrib_text)

        # Find user gravatar url
        avatar_url = 'https://github.com/{HANDLE}.png?size=200'.format(HANDLE=person['handle'].lstrip('@'))

        # Add user
        s += [template.format(HANDLE=person['handle'], HANDLE_URL="https://github.com/"+person['handle'],
                              AFFILIATION=person['affiliation'],
                              AVATAR_URL=avatar_url, NAME=person['name'], CONTRIBUTIONS=contrib_text)]
    s += ['</table>']
    final_text = ['.. raw:: html', '']
    for line in s:
        final_text += ['   ' + line]
    final_text = '\n'.join(final_text)
    return final_text

contributors_files = ['team/contributors-binder.yaml', 'team/contributors-jupyterhub.yaml']
for ifile in contributors_files:
    with open(ifile, 'r') as ff:
        data = yaml.load(ff)
    people = pd.DataFrame(data)
    
    table = _generate_contributors(people, keyvals)
    new_name = os.path.splitext(ifile)[0]
    with open(new_name+'.txt', 'w') as ff:
        ff.write(table)